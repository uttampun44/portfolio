name: portfolio

on:
 push:
   branches:
     -main
 pull_request:
   branches:
     -main
 workflow_dispatch:

  # Allows you to run this multiple os
jobs:
  frontend:
    runs-on: ${{ matrix.os }}
    strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
    defaults:
      run:
        working-directory: ./portfolio-frontend
    steps:

     # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        
        # Step 2 Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
        working-directory: ./portfolio-frontend
        
        # Step 3: Run the build script
      - name: Run build 
        run: npm run build

  backend:
    runs-on: ${{ matrix.os }}
    strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
    defaults:
      run:
        working-directory: ./portfolio-backend
    steps:

     # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        
        # Step 2 copy .env
      - name: Copy.env
        run: php "file_exists('.env') || copy('.env.example', '.env');"
        
       # Step 3 Install PHP and dependencies os
      - name: Install PHP and dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y php8.2 php8.2-cli php8.2-fpm php8.2-mbstring php8.2-xml php8.2-mysql php8.2-pgsql php8.2-gd php8.2-curl php8.2-zip php8.2-bcmath php8.2-soap php8.2-intl

      # Install PHP on Windows (if needed)
      - name: Install PHP on Windows
        if: runner.os == 'Windows'
        run: |
          choco install php --version=8.2

      # Install PHP on macOS (if needed)
      - name: Install PHP on macOS
        if: runner.os == 'macOS'
        run: |
          brew install php@8.2

       # step 4 install dependencies
      - name: Install composer dependencies
        run: composer install -n --prefer-dist
      
        # step 5 geneate key
      - name: Generate key
        run: php artisan key:generate
      
       # step 6 create database
      - name: create database
        run: |
             mkdir -p database
             touch database/database.mysql  

        # step 7 migrations
      - name: Run migrations
        run: php artisan migrate --seed

        #step 8 storage link
      - name: Storage link
        run: php artisan storage:link

        #step 9 permission
      - name: Permission
        run: chmod -R 777 storage bootstrap/cache

      # Step 10 run tests
      - name: Run tests
        run: php artisan test



